from agt_server.agents.base_agents.adx_agent import NDaysNCampaignsAgent 
from agt_server.agents.test_agents.adx.tier1.my_agent import Tier1NDaysNCampaignsAgent 
from agt_server.local_games.adx_arena import AdXGameSimulator 
from agt_server.agents.utils.adx.structures import Bid, Campaign, BidBundle, MarketSegment
from typing import Set, Dict, List
from math import isfinite, atan
from collections import Counter
import random, copy

# ONE DAY GAME

REACH_FACTORS = [0.3, 0.5, 0.7]
NUM_AGENTS = 19
TOTAL_USERS = 10000
# MARKET_SEGMENT = MarketSegment(("Male", "Young"))
EPSILON = 1e-9

agents = []

class Agent:

    def __init__(self, id):

        market_segment = random.choice(MarketSegment.all_segments())
        # print(market_segment.name)
        # print(self.get_segment_size(market_segment.name))

        reach_factor = random.choice(REACH_FACTORS)
        reach = reach_factor * self.get_segment_size(market_segment.name)
        budget = reach
        BID_SHADING_FACTOR = random.choice([0.9846408775372094, 0.9696255498641644, 0.9479499571177387, 0.9979820120918078, 0.9690742173461686, 0.9609311067531139, 0.9375958020015026, 0.9234053779421523, 0.9972123335116723, 0.9837701058483989, 0.9849943458203376, 0.9849621007971271, 0.9850702225348991, 0.9908774749000919, 0.9829367263952281, 0.9976248506463714, 0.9996092662873954, 0.9866008836962107, 0.9847815974476272, 0.9938356277561124, 0.9861469887457175, 0.9814837564917955, 0.9883271311419205, 0.9869048850830139, 0.9785759782071005, 0.9838971427652798, 0.9854071453509412, 0.997759173724547, 0.9875132275668014, 0.9832481784237186, 0.9842386832943352, 0.9663776308959849, 0.9853714752983904, 0.9776273684379129, 0.9877180286418817, 0.9851762289507581, 0.963986853466691, 0.9763598388127994, 0.99411291303793, 0.9910640381855716, 0.9938715737874215, 0.9788770833556147, 0.9913458125949477, 0.9892768219134206, 0.9847750926306482, 0.9432123653383847, 0.985292155940001, 0.9660802984123478, 0.9748776591141798, 0.9700461577585269, 0.9762726711418931, 0.9443625418703223, 0.9838774428305224, 0.9677920793323864, 0.9915006855330959, 0.9918184919521141, 0.974179693537761, 0.9792784483876473, 0.9962088510697712, 0.9851304988580073, 0.9737674933057966, 0.9782136252819095, 0.9774938372322566, 0.9001299709094008, 0.973971243888733, 0.9754366444554232, 0.9923170795629213, 0.9892396195171347, 0.9788261614416661, 0.9877180286418816, 0.995710404117351, 0.9814837564917955, 0.931947980576228, 0.9970851981805519, 0.9962088510697711, 0.978201814651948, 0.9978807879879652, 0.9874029755019041, 0.9645815862622149, 0.9800262010371312, 0.9765634466482663, 0.973971243888733, 0.9572939602583347, 0.9926511594359764, 0.9817650084549117, 0.9590827148215696, 0.9778056422135749, 0.9716300426156167, 0.9758605085229279, 0.9986765475956612, 0.984962100797127, 0.9778056422135749, 0.9966061545960495, 0.9914590808603779, 0.9853092741075239, 0.959359544653944, 0.9819806178568052, 0.9710016716896037, 0.963986853466691, 2e-09, 0.9944135913660475, 0.9888214993113437, 0.9913261574566514, 0.9925236532931327, 0.9803591350679254, 0.9747243790963442, 0.9938367347521855, 0.9916676669171184, 0.9667840960863968, 0.9708169214404497, 0.9311406901519241, 0.9838451019713788, 0.9618699763907773, 0.9675407799934078, 0.9739183902388523, 0.9955794014144728, 0.9974808603356375, 0.9873853428081557, 0.9898806141363061, 0.9819806178568052, 0.9767410647248019, 0.9995075700520246, 0.9881058988899657, 0.9346011953522293, 0.9686184408235624, 0.9712316023523878, 0.9272625211185362, 0.9531909950928711, 0.9901551321428059, 0.9746592891473402, 0.9917389751750721, 0.9950342402718848, 0.9567106828289577, 0.9522487494467596, 0.966873551092379, 0.9771278989478754, 0.95708227215283, 0.921057191396931, 0.9938715737874215, 0.9699614384413855, 0.9794958885554127, 0.9758605085229279, 0.9966061545960495, 1e-09, 0.997676553166154, 0.9595293491246699, 0.9673581151616867, 0.9776522347848539, 0.9407564830939661, 0.9630062365595775, 0.994548455290335, 0.9871230843545855, 0.9868121321459713, 0.9695060631504193, 0.9477460774445557, 0.9868813643404106, 0.9921057180532914, 0.9802519014283513, 0.9872648429626094, 0.9616647161768378, 0.9663720233928714, 0.987363431633281, 0.9783439523747137, 0.9986575755930096, 1e-09, 0.9716300437556727, 0.9728943666103982, 0.976272671141893, 0.993419298290054, 0.9721791589808337, 0.9782136252819094, 0.969615826600814, 0.9944557439550991, 0.9965033107029443, 0.9702103158132758, 1e-09, 0.9833277899022556, 0.9883716890587236, 0.9900641874136078, 0.961900137326494, 0.9916417999170376, 0.9095120764423767, 0.9829367263952281, 0.9927796138884037, 0.9679336971235212, 0.9856552402095412, 0.9491406318201577, 0.9868121321459712, 0.9645815862622149, 0.973971243888733, 0.9750022863993268, 0.9902645275822253, 0.9962088510697712, 0.9750022863993267, 0.9813577513755187, 0.9819806178568052, 0.9897567132200163, 0.9679336971235211, 0.9410948108416552, 0.9842386832943351, 0.9673048547475165, 0.9757297443702798, 0.9877257590233166, 0.997759173724547, 0.9763598388127994, 0.9981864557421587, 0.9950967552520068, 0.9048178493348866, 0.9556090938999382, 0.996922813144664, 0.9572782322355742, 0.9423269929652575, 0.979199881848952, 1e-09, 0.9786466924735169, 0.9782758321539945, 0.9978807879879653, 0.9865569629792799, 0.9421048097998855, 0.997759173724547, 0.9936752627812298, 0.9432697611792138, 0.9848538228446401, 0.9757154074942677, 0.9912802388541164, 0.9910640381855716, 0.988936716533125, 0.9698496590933798, 0.9938715737874215, 0.9787136878965013, 0.9995075700520245, 0.9908818877860592, 0.9710606965186087, 0.9921279240073536, 0.960858939253459, 0.9960259377669048, 0.9849621007971271, 0.9759654919891009, 0.980877849768762, 0.996280057346388, 0.977177251746171, 0.9888309464804677, 0.9854413632217943, 0.9780494993074673, 0.9589395574581223, 0.9967217486339346, 1e-09, 0.9793290491825374, 0.9366248212005519, 0.9947624047711632, 0.9900641874136078, 0.9543285339788795, 0.9916417999170376, 0.9848059990182412, 0.9731759936139596, 0.9986765475956612, 0.9806702557479753, 0.9721361138422984, 0.9854071453509412, 0.9955498795272268, 0.9537219246543467, 0.9919801782289516, 0.980877849768762, 0.97245308746397, 0.978492346786339, 0.9856442785296597, 0.9723089103277818, 0.9865544752195019, 0.9853092741075238, 0.9310786435155896, 0.9536433626890157, 0.9673581151616866, 0.9852035241250073, 0.9416560505771171, 0.9714466665155619, 0.9926995025758897, 0.9916676669171183, 0.9914980185107994, 0.9792784483876473, 0.99411291303793, 0.9870878628246931, 0.9847750926306482, 0.9655457809058808, 0.9942001181970044, 0.9971014941969981, 0.9935582792212756, 0.9752454929401164, 0.9783463399618438, 0.9731759936139595, 0.9727013316598463, 0.9528898375072307, 0.9892768219134206, 0.975294533362815, 0.9386664499121502, 0.9266575804878266, 0.9841209437067007, 0.9871230843545855, 0.9556074552275335, 0.9391910934128457, 0.9951139995850402, 0.9813323225924454, 0.974887015340999, 0.9979590983732795, 0.995710404117351, 0.9951987762615169, 0.9516001268017533, 0.9514394946184971, 0.9951987762615169, 0.9930215922107828, 0.9949973680915076, 0.9668879240274146, 0.9668423554895976, 0.9926995025758897, 0.9861469887457176, 0.9957076853611894, 0.9885024370772214, 0.9877023878726875, 0.9908774749000919, 0.9869840713573887, 0.9918834526088516, 0.9800281961196021, 0.9979590983732793, 0.9752454929401164, 0.9926995025758896, 0.9876649576511332, 0.9993794364822978, 0.954957444665578, 0.9797160735643679, 0.9323192045417181, 0.9923192272644373, 0.9663720233928714, 0.9431742832904747, 0.99777872513722, 0.9516001268017532, 0.9222563643463639, 0.983899187419434, 0.9842386832943351, 0.980028196119602, 0.9831704030359607, 0.9978807879879652, 0.9913458125949477, 0.9997131970501332, 0.9522487494467595, 0.9250987689252089, 0.9927220710946246, 0.9589395574581225, 0.9777328862351585, 0.9898784747178093, 0.9646653360487424, 0.9595205216196444, 0.9860650382729852, 0.9883716890587236, 0.9337453021554192, 0.9925236532931326, 0.9845938130428226, 0.9972123335116723, 0.9051844414028861, 0.994191212356402, 0.9898854782113855, 0.9924955452545747, 0.9104788737588078, 0.9822359066560704, 0.9912802388541163, 0.9689416078717699, 0.9277119950213955, 0.9938356277561123, 0.97649115002008, 0.9672129177673889, 0.961900137326494, 0.9838991874194339, 0.9918834526088517, 0.9971014941969981, 0.9813323225924454, 0.9976765531661542, 0.9551683158281917, 0.9860650382729851, 0.9947877019755436, 0.9568285652903031, 0.9603251976942079, 0.9962237143815484, 0.9874464049236337, 0.9767410647248019, 0.9794917929331458, 0.996695336597822, 0.9827744591033434, 0.9739712438887331, 0.9669140015971016, 0.9916417999170376, 0.9884760955554823, 0.9821983434418611, 0.974887015340999, 0.9806702557479753, 0.9918480951124785, 0.9968419509925107, 0.9563522162085225, 0.9527804010062487, 0.995211955917369, 0.942548569441318, 0.99615106357205, 0.9877257590233166, 0.9568767853519863, 0.9638558078965601, 0.9914211450431519, 0.9917389751750723, 0.9997131970501332, 0.983042767483139, 0.9723089103277818, 0.9883271311419204, 0.9698496590933797, 0.9995135730066671, 0.9838867236292572, 0.9710016716896037, 0.9472414131039354, 0.9902799737284362, 0.979199881848952, 0.9971318273822857, 0.9618699763907773, 0.964581586262215, 0.9856104036399363, 0.9603131164660837, 0.9934192982900539, 0.9593407478211666, 0.996280057346388, 0.9739183902388523, 0.9403748141933276, 0.9696845015954422, 0.9746592891473403, 0.9964465719873662, 0.9971318273822858, 0.9924112537521397, 0.9603251976942079, 0.9905606518761233, 0.9890758028171655, 0.9838076893133608, 0.9974808603356377, 0.9684877793232963, 0.9998893555700541, 0.9448182495257983, 0.9921057180532914, 0.9457994895231139, 0.9699814245844588, 0.9938367347521855, 0.9876792478984627, 0.973971243888733, 0.960916416403996, 0.983042767483139, 0.9537219246543467, 0.9680349671136104, 0.9782568453551674, 0.962168057545262, 0.9746222868785773, 0.9989694796692266, 0.974887015340999, 0.990901310859743, 0.9668879240274145, 0.9485550833957065, 0.9924955452545747, 0.9923249420901311, 0.9782018146519478, 0.9788770833556147, 0.9344888227225365, 0.9696255498641644, 0.9943195439427068, 0.9919967110077945, 0.977627368437913, 0.9875598916226913, 0.9612633539997905, 0.9645815862622148, 0.9969228131446641, 0.984022668203238, 0.9846200728353152, 0.9970340701042839, 0.9842386832943351, 0.9704958904172799, 0.960283652948632, 0.9862573859209287, 0.9343456563815064, 0.98389714276528, 0.9962237143815483, 0.9993794364822978, 0.9955977942833122, 0.9857515100869448, 0.9874615933480837, 0.9954467965365827, 0.9439009014717621, 0.9824721133771209, 0.9928484062870049, 0.9704958904172799, 0.9728943666103982, 0.9864388430256525, 0.9804217407283367, 0.9768821336628303, 0.9776690056316634, 0.9702400487884875, 0.9799294702066088, 0.975294533362815, 0.9849621007971271, 0.9261146517192442, 0.9850540284310418, 0.9846408775372094, 0.994548455290335, 0.973821749083595, 0.9799294702066088, 0.9646653360487425, 0.9791108240076062, 0.9254157597928465, 0.9684877793232962, 0.9877180286418816, 0.9739349788038398, 0.998399700099857, 0.9612633539997906, 0.998735824698817, 0.9852035241250073, 2e-09, 0.9992976076114236, 0.9924112537521398, 0.9799250916727703, 0.9915520907448628, 0.9996300216841689, 0.9889262454298874, 0.9940441660305326, 0.9564749583286836, 0.9852035241250073, 0.9995135730066671, 0.9632605466637303, 0.9517865245464242, 0.9908938110704569, 0.9636024128976637, 0.9934969633529908, 0.9941417551321058, 0.9467736644907969, 0.9850702225348992, 0.9864222859231258, 0.983079396601167, 0.9728943666103982, 0.9954467965365826, 0.9999012426227989, 0.9260625246685169, 0.9631262184389363, 0.960858939253459, 0.9926995025758896, 0.9730121136659178, 0.9969228131446641, 0.9996092662873954, 0.9848538228446401, 0.9621149089758113, 0.9778676827468157, 0.9595885509693021, 0.993419298290054, 0.9993794364822978, 0.9441464195335897, 0.9822310132685452, 0.9866008836962107, 0.9941417551321059, 0.9782758321539945, 0.9862573859209286, 0.966912673771996, 0.9661226221799343, 0.9955498795272268, 0.9763374281088936, 0.9952124934525407, 0.9846200728353152, 0.978531482495942, 0.967933697123521, 0.9804860503416764, 0.9603902573947226, 0.9609164164039959, 0.9832481784237186, 0.9785314824959419, 0.9635163227424781, 0.9923192272644373, 0.9908938110704569, 0.9499038549179769, 0.9871230843545855, 0.9748776591141798, 0.9892768219134207, 0.9806702557479753, 0.9215357984507063, 0.9601499507492064, 0.9905606518761234, 0.9700933083784212, 0.9842386832943351, 2e-09, 0.9716300437556726, 0.9947761296725118, 0.9955794014144728, 0.9094772585590146, 0.9870878628246931, 0.9888214993113437, 0.9923192272644374, 0.974887015340999, 0.9386664499121502, 0.9568767853519862, 0.9877655610112968, 0.995549879527227, 0.9908774749000919, 0.987363431633281, 0.9269913086122378, 0.9846427852143802, 0.9941901563970608, 0.9838396266949562, 0.9804860503416764, 0.9328230170118695, 0.9700461577585268, 0.9914590808603779, 0.9433024091872731, 0.9788261614416661, 0.9934969633529905, 0.9947358902984502, 0.9384015983324313, 0.979515929130978, 0.9757297443702799, 0.9926511594359761, 0.9714254658849752, 0.9804124641999756, 0.9758605085229279, 0.9884760955554822, 0.9802519014283513, 0.9453727559861154, 0.9582896824694124, 0.9646209539763555, 0.9241509006079713, 0.9923192272644373, 0.9856552402095412, 0.9572939602583347, 0.9755886067798178, 0.9925236532931326, 0.9874029755019041, 0.9979590983732793, 0.9893730301670407, 0.9821202803826571, 0.959696292627744, 0.9972123335116723, 0.9983705030240425, 0.9998036517201982, 0.9919801782289516, 0.9838451019713788, 0.99411291303793, 0.9916938404141544, 1e-09, 0.9786210464294329, 0.9394185120631572, 0.9678203783725188, 0.975294533362815, 0.9854118991088836, 0.9967217486339346, 0.983042767483139, 0.990901310859743, 0.9556477649499059, 0.997759173724547, 0.9719806789000841, 0.9976765531661541, 0.9423230709644947, 0.9964299883393698, 0.9824697834905974, 0.9525361422334705, 0.9964465719873662, 0.978621983594052, 0.9854413632217942, 0.9950779962444302, 0.9640219998300525, 0.9965125249454139, 0.9659653481046475, 0.994191212356402, 0.9788770833556147, 0.9947358902984503, 0.9865087166183848, 0.9700933083784211, 0.9892170875142366, 0.979164754073255, 0.9595293491246699, 0.9888309464804678, 0.9690296270902118, 0.9798662494944373, 0.9912802388541164, 0.9571523430783602, 0.9586697870845264, 0.9859557658850472, 0.9791647540732549, 0.9730121136659178, 0.9860650382729852, 0.9725939131833944, 0.9911228340865228, 0.9967821680147022, 0.964192631601142, 0.9634843410724563, 0.9898854782113854, 0.9912802388541164, 0.9852518045449475, 0.9972257495766896, 0.9968419509925108, 0.9443625418703223, 0.9323505925465092, 0.9908774749000919, 0.9404880224621773, 0.9832989703624022, 0.9699348028575346, 0.9502909526218801, 0.9965033107029443, 0.9501857818858759, 0.9425176454112709, 0.9944973443485327, 0.9871230843545854, 0.9872648429626095, 0.9796560226808637, 0.9981711059404571, 0.9864388430256525, 0.9810757466362656, 0.9556548854491498, 0.9827744591033434, 1e-09, 0.9892768219134207, 0.957773407398045, 0.9750022863993268, 0.9716300437556727, 0.9696158266008141, 0.9822359066560703, 0.9762726711418932, 0.9845938130428228, 0.9923170795629213, 0.959359544653944, 0.9892384634307831, 0.9970851981805517, 0.9639614631171392, 0.9887603381827422, 0.9846408775372094, 0.9586845958921891, 0.9995075700520245, 0.998735824698817, 0.99615106357205, 0.9777328862351584, 0.9921279240073537, 0.9920221985362307, 0.978621983594052, 0.9491382050422776, 0.9916417999170376, 0.9962088510697712, 0.95952934912467, 0.9682279623568579, 0.9883716890587237, 0.9934969633529906, 0.9892384634307831, 0.990981356473817, 0.9587234945037539, 0.9872648429626096, 0.9807897897700034, 0.9917389751750721, 0.9849943458203377, 0.9914211450431519, 0.9763374281088936, 0.9915006855330959, 0.9965033107029443, 0.9870584708268203, 0.9924112537521398, 0.9634843410724562, 0.9912618601459289, 0.9706696539510202, 0.9806702557479753, 0.9976497500310181, 0.9983842058414183, 0.9152523215805493, 0.9985474156479718, 0.9874464049236337, 0.9868121321459712, 0.9943195439427068, 0.9714466665155619, 0.9962088510697712, 0.9832501998667877, 0.9667840960863968, 0.9692536586661196, 0.9546995109834173, 0.9871230843545855, 0.9239466669896987, 0.9850702225348991, 0.962168057545262, 0.9632605466637303, 0.9712316023523877, 0.9240288100050839, 0.9712316023523878, 0.9899449872568502, 0.9951139995850403, 0.9800985662501376, 0.9919819653744527, 0.9710968956032254, 0.9981864557421587, 0.9892170875142368, 0.9827744591033434, 0.9686184408235625, 0.9965033107029443, 0.9997131970501333, 0.958464811913576, 0.9549395491135982, 0.9752135513184008, 0.9822310132685452, 0.939230459149101, 0.9765634466482663, 0.9789323947983928, 0.9912618601459289, 0.9817564826684816, 0.9404880224621773, 0.9750809357154431, 0.9942158761396963, 0.992848406287005, 0.9908818877860593, 0.9912802388541164, 0.9924955452545747, 0.9186374185673446, 0.9868121321459712, 0.9115460115232971, 0.9630692713552257, 0.9176365001534514, 0.9928005648490327, 0.9477576948418496, 0.9928005648490328, 0.9938715737874215, 0.9729384329605831, 0.9703218500193315, 0.9908818877860592, 0.9872648429626095, 0.9723557465816972, 0.9765419229684671, 0.9776619404309704, 0.9593407478211665, 1e-09, 0.9798906481553107, 0.9722986451593513, 0.9854413632217943, 0.9863065471524929, 0.990901310859743, 0.9989488844384987, 0.9831301389013947, 0.9814837564917955, 0.9969735357865634, 0.9851304988580073, 0.9746592891473403, 0.9456719139845547, 0.9714466665155619, 0.9954467965365827, 0.9879973823877445, 0.9954467965365827, 0.9619392861518199, 0.975510867648931, 0.9965033107029443, 0.9908774749000919, 0.980552071200454, 0.9914590808603779, 0.9556997128935626, 0.9972257495766895, 0.983079396601167, 0.9793096946346893, 0.956828565290303, 0.9871165308268153, 0.9846408775372095, 0.9928005648490327, 0.9477576948418496, 0.995710404117351, 0.9791108240076062, 0.9995710206332465, 0.9833277899022556, 0.9976765531661542, 0.9941417551321058, 2e-09, 0.9976765531661541, 0.9609311067531139, 0.9751297192520227, 0.9879973823877444, 0.9774598236193951, 0.9872648429626095, 0.9739349788038397, 0.9821202803826571, 0.9995075700520246, 0.9827526615473771, 0.9690633999464187, 0.9989488844384988, 0.9824697834905975, 0.9998036517201982, 0.9856552402095412, 0.9632605466637303, 0.9459978342075622, 0.9815142781407873, 0.9847750926306481, 0.9728351887099922, 0.9887603381827421, 0.977177251746171, 0.9416560505771171, 0.9792784483876472, 0.9976248506463714, 0.9551683158281916, 0.9924955452545748, 0.996280057346388, 0.9669528204280917, 0.9911228340865228, 0.9316194157272871, 0.9817650084549118, 0.9577738492499996, 0.9762726711418931, 0.988169943402317, 0.9838396266949563, 0.9530721005977604, 0.9391696867373027, 1e-09, 0.9473662247759446, 0.9785759782071005, 1e-09, 0.9298286376364634, 0.9717667704890818, 0.9871165308268153, 0.9636024128976637, 1e-09, 0.9669528204280917, 0.9794958885554127, 0.9966061545960495, 0.9851304988580073, 0.9927220710946245, 0.9970340701042839, 0.9861469887457175, 0.9714466665155619, 0.9864388430256527, 0.9807897897700035, 0.9746222868785772, 0.9759654919891009, 0.9366248212005519, 0.9522487494467595, 0.961034535155296, 0.9908774749000919, 0.9831301389013947, 0.9739349788038396, 0.9792700691726737, 0.9723151908837837, 0.9927220710946245, 0.9847815974476272, 0.9969735357865636, 0.986554475219502, 0.9702103158132758, 0.9997131970501332, 0.9890758028171653, 0.9863428920089115, 0.9758605085229279, 0.966377630895985, 0.9383113914882081, 0.9849621007971271, 0.989026734730992, 0.9051910122747269, 0.9898784747178093, 0.9987358246988172, 0.9892396195171347, 0.989880614136306, 0.9877023878726875, 0.9792700691726737, 0.9947761296725118, 0.9699614384413854, 0.9595885509693021, 0.9908774749000919, 0.9986200298489897, 0.9619392861518199, 0.9899449872568503, 0.9387423721751492, 0.9832481784237187, 1e-09, 0.97245308746397, 1e-09, 0.9845938130428227, 1e-09, 0.984826876676246, 0.9981711059404571, 0.9860650382729851, 0.9269913086122379, 0.9968419509925108, 0.9947761296725118, 0.9847750926306482, 0.9994765699616446, 0.9858545986795794, 0.9865544752195021, 0.9918184919521141, 0.9309465388962457, 0.9944383273539504, 0.9741796935377611, 0.9714254658849752, 0.9912802388541164, 0.9869356489151789, 0.9830793966011669, 0.9888214993113437, 0.971030921706194, 0.9998893555700541, 0.971030921706194, 0.9838867236292572, 0.9788770833556149, 0.9901462095461527, 0.9857515100869448, 0.9574354332150541, 0.9700505492085054, 0.9952230226661722, 0.9944383273539504, 0.990279973728436, 0.9752945333628151, 0.9577924452936548, 0.9981864557421588, 0.9519394676753632, 0.9998036517201982, 0.9945484552903351])
        
        bid_per_item = BID_SHADING_FACTOR * budget / reach 

        self.id = id
        self.campaign = Campaign(reach, market_segment, 1, 1)
        self.bid = Bid(id, market_segment, bid_per_item, budget)

        print(f"Initializing agent {id} with reach {reach} and bid {bid_per_item} and segment {market_segment.name}")
    
    def get_id(self):
        return self.id
    
    def get_segment_size(self, segment):
        market_segment_map = {
            "MALE_YOUNG_LOWINCOME":   1836,
            "MALE_YOUNG_HIGHINCOME":   517,
            "FEMALE_YOUNG_LOWINCOME":  1980,
            "FEMALE_YOUNG_HIGHINCOME":  256,
            "MALE_OLD_LOWINCOME":      1795,
            "MALE_OLD_HIGHINCOME":      808,
            "FEMALE_OLD_LOWINCOME":    2401,
            "FEMALE_OLD_HIGHINCOME":    407,

            "FEMALE_LOWINCOME":        4381,
            "FEMALE_HIGHINCOME":        663,
            "YOUNG_LOWINCOME":         3816,
            "YOUNG_HIGHINCOME":         773,
            "OLD_LOWINCOME":           4196,
            "OLD_HIGHINCOME":          1215,

            "MALE_YOUNG":               2353,
            "MALE_OLD":                 2603,
            "FEMALE_YOUNG":             2236,
            "FEMALE_OLD":               2808,
            "MALE_LOWINCOME":          3631,
            "MALE_HIGHINCOME":         1325,
        }

        return market_segment_map[segment.upper()]

# Run auction

class AuctionSimulation:

    def __init__(self):
        self.reset()

    def reset(self):
        agents = [Agent(i) for i in range(NUM_AGENTS)]
        
        self.agents = agents
        self.agents.sort(key = lambda agent: agent.bid.bid_per_item, reverse = True)

        self.distribution = {
            MarketSegment(("Male", "Young", "LowIncome")): 1836,
            MarketSegment(("Male", "Young", "HighIncome")): 517,
            MarketSegment(("Male", "Old", "LowIncome")): 1795,
            MarketSegment(("Male", "Old", "HighIncome")): 808,
            MarketSegment(("Female", "Young", "LowIncome")): 1980,
            MarketSegment(("Female", "Young", "HighIncome")): 256,
            MarketSegment(("Female", "Old", "LowIncome")): 2401,
            MarketSegment(("Female", "Old", "HighIncome")): 407
        }

        print(f"Agents in descending order: {[agent.get_id() for agent in self.agents]}")
        
    def sample_random_users(self):
    
        segments = list(self.distribution.keys())
        weights = list(self.distribution.values())

        population = [
        segment
        for segment, count in self.distribution.items()
        for _ in range(count)
        ]

        users = random.sample(population, TOTAL_USERS)

        return users



    def get_allocation_and_payment(self, my_agent: Agent, k: int,
                                   agent_rankings: Dict[MarketSegment, List[Agent]],
                                   users: List[MarketSegment]):
        
        # Insert my agent at kth position in each list of agent_rankings

        def add_my_agent_to_rankings(rankings):
            for user_segment in rankings:
                segment_agent_rankings = rankings[user_segment]

                if not my_agent.bid.item.issubset(user_segment):
                    # if not applicable to my_agent, skip
                    print(f"Agents in descending order: {[agent.get_id() for agent in segment_agent_rankings]} in {user_segment.name}")
                    continue

                # add my_agent
                # POSSIBLE SOURCE OF ERROR: kth place is different across multiple segments, so bids might differ
                my_agent.bid.bid_per_item = segment_agent_rankings[k].bid.bid_per_item + EPSILON if k < len(segment_agent_rankings) else EPSILON
                segment_agent_rankings.insert(min(k, len(segment_agent_rankings)), my_agent)

                print(f"Agents in descending order: {[agent.get_id() for agent in segment_agent_rankings]} in {user_segment}")
        
        new_rankings = {key: value.copy() for key, value in agent_rankings.items()}

        add_my_agent_to_rankings(new_rankings)

        # Create agent list with my_agent in it

        agents_list = self.agents.copy()
        agents_list.append(my_agent)
        
        # agents = {agent.id: agent for agent in agents_list}
        bid = {agent: agent.bid.bid_per_item for agent in agents_list}
        x = {agent: 0 for agent in agents_list}
        p = {agent: 0 for agent in agents_list}
        eff_reach = {agent: 0 for agent in agents_list}
        utility = {agent: 0 for agent in agents_list}

        # Loop through all users
        for user in users:

            # Go through bidders in order; check to make sure budget hasn't been exceeded first
            for i in range(len(new_rankings[user])):

                agent_i = new_rankings[user][i]

                if (i + 1 >= len(new_rankings[user])):
                    # no more agents who bid below, so it's free
                    x[agent_i] += 1
                    break

                agent_iplus1 = new_rankings[user][i + 1]

                if (p[agent_i] + agent_iplus1.bid.bid_per_item > agent_i.bid.bid_limit):
                    # we are over budget
                    continue

                else:
                    x[agent_i] += 1
                    p[agent_i] += agent_iplus1.bid.bid_per_item
                    break
            
        for agent in eff_reach.keys():
            eff_reach[agent] = self.effective_reach(x[agent], agent.campaign.reach)
            utility[agent] = eff_reach[agent] * agent.bid.bid_limit - p[agent]
            print(f"""Agent {agent.get_id()} bids {agent.bid.bid_per_item}, gets allocation {x[agent]}, payment {p[agent]}, effective reach {eff_reach[agent]}, utility {utility[agent]}""")

        return bid, x, p, eff_reach, utility
        
    def effective_reach(self, x: int, R: int) -> float:
        return (2.0 / 4.08577) * (atan(4.08577 * ((x + 0.0) / R) - 3.08577) - atan(-3.08577))

    def simulate(self):

        self.reset()
        
        my_agent = Agent("John")
        effective_reaches = []
        my_agent_utilities = []
        bids = []

        # Generate TOTAL_USERS random users

        users = self.sample_random_users()

        # For each market segment, get bid rankings (already sorted because agent list is sorted)

        agent_rankings = {k: [] for k in self.distribution.keys()}

        for user_segment in self.distribution.keys():
            for agent in self.agents:
                if agent.bid.item.issubset(user_segment):
                    agent_rankings[user_segment].append(agent)
                    

        for k in range(4):
            print("====================================")
            print(f"Running simulation for position {k}")

            # SIMULATION AT A HIGH LEVEL:

            # 1. Fix the bid of each bot agent for each individual market segment, then get rankings.

            # 2. Loop through values of k and fix my agent's bid for each individual market segment (in get_allocation_and_payment)
            #    To simplify, we use the same value of k for every market segment.

            # 3. Simulate a round of the auction; simulate n users coming in. For each user go through the bidders in order and
            #    check which one has the highest bid and that isn't yet over budget. 

            bid, x, p, eff_reach, utility = self.get_allocation_and_payment(my_agent, k, agent_rankings, users)

            bids.append(bid[my_agent])
            effective_reaches.append(eff_reach[my_agent])
            my_agent_utilities.append(utility[my_agent])

            print("------------------------------------")
            print(f"Final stats for position {k}: bid {bid[my_agent]}, allocation {x[my_agent]}, payment {p[my_agent]}, effective reach {eff_reach[my_agent]}, utility {utility[my_agent]}")
        
        max_utility = max(my_agent_utilities)
        max_index = my_agent_utilities.index(max_utility)

        max_eff_reach = effective_reaches[max_index]
        best_bid = bids[max_index]

        print("====================================")
        print(f"Best position for {my_agent.get_id()} is position {max_index} with bid {best_bid}, with effective reach {max_eff_reach} and utility {max_utility}")

        return best_bid

simulation = AuctionSimulation()

NUM_SIMULATIONS = 1000
best_bids = []

for i in range(NUM_SIMULATIONS):
    best_bids.append(simulation.simulate())

print(best_bids)
print(f"Average best bid: {sum(best_bids) / len(best_bids)}")

# agent_i = agents_list[i]
            # bid_segment = agent_i.bid.item
            # subsets = []

            # for segment in MarketSegment.all_segments():
            #     if bid_segment.issubset(segment):
            #         subsets.append(segment)
            
            # # print(subsets)

            # # Randomly sample users up to budget

            # num_desired_users_left = sum([freq_map[segment] for segment in subsets if segment in freq_map])

            # num_desired_users = num_desired_users_left if i == NUM_AGENTS else agent_i.bid.bid_limit // agents_list[i + 1].bid.bid_per_item

            # # Now allocate bidders
            
            # # if last place bidder or not enough left, allocate all

            # if i == NUM_AGENTS or num_desired_users_left < num_desired_users:
            #     for segment in subsets:
            #         if segment in freq_map: freq_map[segment] = 0
                
            #     x_agent = current_supply

            # else:

            #     x_agent = num_desired_users

            #     # print(x_agent)

            #     filtered_counts = {segment: freq_map[segment] for segment in subsets if segment in freq_map}

            #     # print(filtered_counts)

            #     # randomly sample this many agents with max equal to number in freq_map
    
            #     population = [seg for seg, count in filtered_counts.items() for _ in range(count)]

            #     # print(population)

            #     sampled_users = random.sample(population, int(num_desired_users))

            #     print(sampled_users)

            #     for user in sampled_users:
            #         freq_map[user] -= 1


            # p_agent = 0 if i == NUM_AGENTS else x_agent * agents_list[i + 1].bid.bid_per_item
            # # else, 

            # x_agent = current_supply if i == NUM_AGENTS else min(agent_i.bid.bid_limit // agents_list[i + 1].bid.bid_per_item, current_supply)
            
            # id = agents_list[i].get_id()